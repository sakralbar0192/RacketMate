import { Markup } from 'telegraf';
import { type ProfileSetupWizardContext } from '../index.ts';

export class DaySelectionStep {
  static async execute(ctx: ProfileSetupWizardContext) {
    const state = ctx.wizard.state;
    
    if (!state.selectedDays) {
      state.selectedDays = [];
    }

    await ctx.reply(
      'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –¥–ª—è –∏–≥—Ä—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):',
      Markup.inlineKeyboard([
        [
          Markup.button.callback(ctx.wizard.state.selectedDays?.includes('–ü–Ω') ? '‚úÖ –ü–Ω' : '–ü–Ω', 'day_mon'),
          Markup.button.callback(ctx.wizard.state.selectedDays?.includes('–í—Ç') ? '‚úÖ –í—Ç' : '–í—Ç', 'day_tue'),
        ],
        [
          Markup.button.callback(ctx.wizard.state.selectedDays?.includes('–°—Ä') ? '‚úÖ –°—Ä' : '–°—Ä', 'day_wed'),
          Markup.button.callback(ctx.wizard.state.selectedDays?.includes('–ß—Ç') ? '‚úÖ –ß—Ç' : '–ß—Ç', 'day_thu'),
        ],
        [
          Markup.button.callback(ctx.wizard.state.selectedDays?.includes('–ü—Ç') ? '‚úÖ –ü—Ç' : '–ü—Ç', 'day_fri'),
          Markup.button.callback(ctx.wizard.state.selectedDays?.includes('–°–±') ? '‚úÖ –°–±' : '–°–±', 'day_sat'),
        ],
        [Markup.button.callback(ctx.wizard.state.selectedDays?.includes('–í—Å') ? '‚úÖ –í—Å' : '–í—Å', 'day_sun')],
        [Markup.button.callback('–ì–æ—Ç–æ–≤–æ', 'days_done')],
      ])
    );
  }

  static async handleInput(ctx: ProfileSetupWizardContext, action: string) {
    const state = ctx.wizard.state;
    const dayMap: Record<string, string> = {
      'day_mon': '–ü–Ω', 'day_tue': '–í—Ç', /* ... */
    };

    if (action === 'days_done') {
      if (state.selectedDays?.length === 0) {
        await ctx.answerCbQuery('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å!');
        return false;
      }
      return true; // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    }

    const day = dayMap[action];
    if (day) {
      if (state.selectedDays?.includes(day)) {
        state.selectedDays = state.selectedDays.filter((d: string) => d !== day);
      } else {
        state.selectedDays?.push(day);
      }
      await this.execute(ctx); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    }
    return false;
  }
}